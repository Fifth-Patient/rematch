(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{118:function(e,r,t){"use strict";t.d(r,"a",(function(){return l})),t.d(r,"b",(function(){return m}));var n=t(0),o=t.n(n);function i(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function c(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){i(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var u=o.a.createContext({}),d=function(e){var r=o.a.useContext(u),t=r;return e&&(t="function"==typeof e?e(r):c(c({},r),e)),t},l=function(e){var r=d(e.components);return o.a.createElement(u.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return o.a.createElement(o.a.Fragment,{},r)}},b=o.a.forwardRef((function(e,r){var t=e.components,n=e.mdxType,i=e.originalType,a=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),l=d(t),b=n,m=l["".concat(a,".").concat(b)]||l[b]||p[b]||i;return t?o.a.createElement(m,c(c({ref:r},u),{},{components:t})):o.a.createElement(m,c({ref:r},u))}));function m(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var i=t.length,a=new Array(i);a[0]=b;var c={};for(var s in r)hasOwnProperty.call(r,s)&&(c[s]=r[s]);c.originalType=e,c.mdxType="string"==typeof e?e:n,a[1]=c;for(var u=2;u<i;u++)a[u]=t[u];return o.a.createElement.apply(null,a)}return o.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"},75:function(e,r,t){"use strict";t.r(r),t.d(r,"frontMatter",(function(){return a})),t.d(r,"metadata",(function(){return c})),t.d(r,"toc",(function(){return s})),t.d(r,"default",(function(){return d}));var n=t(3),o=t(7),i=(t(0),t(118)),a={id:"redux-plugins",title:"Redux Plugins",sidebar_label:"Redux Plugins",slug:"/recipes/redux-plugins/"},c={unversionedId:"recipes/redux-plugins",id:"recipes/redux-plugins",isDocsHomePage:!1,title:"Redux Plugins",description:"Adding existing Redux Libraries to your Store",source:"@site/../docs/recipes/redux-plugins.md",slug:"/recipes/redux-plugins/",permalink:"/docs/recipes/redux-plugins/",editUrl:"https://github.com/rematch/rematch/edit/main/docs/../docs/recipes/redux-plugins.md",version:"current",sidebar_label:"Redux Plugins",sidebar:"docs",previous:{title:"Testing",permalink:"/docs/recipes/testing/"},next:{title:"From Redux to Rematch",permalink:"/docs/migrating-from-redux-to-rematch"}},s=[{value:"Adding existing Redux Libraries to your Store",id:"adding-existing-redux-libraries-to-your-store",children:[]},{value:"Including middleware",id:"including-middleware",children:[]}],u={toc:s};function d(e){var r=e.components,t=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},u,t,{components:r,mdxType:"MDXLayout"}),Object(i.b)("h3",{id:"adding-existing-redux-libraries-to-your-store"},"Adding existing Redux Libraries to your Store"),Object(i.b)("p",null,"Most reducers from libraries operate on a private store slice. The easiest way to build functionality on top of these reducers is to create a model for that store slice."),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"baseReducer")," option on a store model allows you to introduce a standard redux reducer that will compute the base state of that model. By combining this with ",Object(i.b)("inlineCode",{parentName:"p"},"effects"),", you can create a public API over the original redux reducer. These effects can be listened for and tracked."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"import { bindActionCreators } from 'redux'\nimport {\n    routerReducer,\n    push,\n    replace,\n    go,\n    goBack,\n    goForward,\n} from 'react-router-redux'\n\nconst reactRouterModel = {\n    baseReducer: routerReducer,\n    effects: dispatch =>\n        bindActionCreators(\n            {\n                push,\n                replace,\n                go,\n                goBack,\n                goForward,\n            },\n            dispatch\n        ),\n}\n")),Object(i.b)("h3",{id:"including-middleware"},"Including middleware"),Object(i.b)("p",null,"Libraries like ",Object(i.b)("inlineCode",{parentName:"p"},"react-router")," also need middleware to work. Since we need both the model and the middleware configured with our store, the best place to do so would be a simple plugin."),Object(i.b)("p",null,"This is as easy as returning a ",Object(i.b)("inlineCode",{parentName:"p"},"config")," object that is merged into our store."),Object(i.b)("p",null,"In our example, ",Object(i.b)("inlineCode",{parentName:"p"},"react-router")," uses a ",Object(i.b)("inlineCode",{parentName:"p"},"history")," object that we'll need to be able to pass to a ",Object(i.b)("inlineCode",{parentName:"p"},"ConnectedRouter"),". We can expose this value for use by attaching it to our store with ",Object(i.b)("inlineCode",{parentName:"p"},"onInit()"),":"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"import { createBrowserHistory } from 'history'\nimport { routerMiddleware } from 'react-router-redux'\nimport reactRouterModel from './model'\n\nexport default function createReactRouterPlugin() {\n    const browserHistory = createBrowserHistory()\n    const middleware = routerMiddleware(browserHistory)\n\n    return {\n        middleware,\n        config: {\n            models: {\n                [storeKey]: reactRouterModel,\n            },\n        },\n        onStoreCreated(store) {\n            return {\n                browserHistory,\n            }\n        },\n    }\n}\n")),Object(i.b)("p",null,"Later, we can use our ",Object(i.b)("inlineCode",{parentName:"p"},"history")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-jsx"}),"const App = () => (\n    <Provider store={store}>\n        <ConnectedRouter history={store.browserHistory} children={<Routes />} />\n    </Provider>\n)\n")))}d.isMDXComponent=!0}}]);