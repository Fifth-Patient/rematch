(self.webpackChunkrematch_docs=self.webpackChunkrematch_docs||[]).push([[309],{3245:function(e,t,n){"use strict";var a=n(7378);t.Z=function(e){var t=e.children,n=e.hidden,o=e.className;return a.createElement("div",{role:"tabpanel",hidden:n,className:o},t)}},8287:function(e,t,n){"use strict";n.d(t,{Z:function(){return u}});var a=n(7378),o=n(1415),r=n(8944),s="tabItem_c0e5",i="tabItemActive_28AG";var c=37,l=39;var u=function(e){var t=e.lazy,n=e.block,u=e.defaultValue,p=e.values,m=e.groupId,d=e.className,f=(0,o.Z)(),h=f.tabGroupChoices,y=f.setTabGroupChoices,g=(0,a.useState)(u),v=g[0],k=g[1],b=a.Children.toArray(e.children),w=[];if(null!=m){var x=h[m];null!=x&&x!==v&&p.some((function(e){return e.value===x}))&&k(x)}var N=function(e){var t=e.currentTarget,n=w.indexOf(t),a=p[n].value;k(a),null!=m&&(y(m,a),setTimeout((function(){var e,n,a,o,r,s,c,l;(e=t.getBoundingClientRect(),n=e.top,a=e.left,o=e.bottom,r=e.right,s=window,c=s.innerHeight,l=s.innerWidth,n>=0&&r<=l&&o<=c&&a>=0)||(t.scrollIntoView({block:"center",behavior:"smooth"}),t.classList.add(i),setTimeout((function(){return t.classList.remove(i)}),2e3))}),150))},C=function(e){var t,n;switch(e.keyCode){case l:var a=w.indexOf(e.target)+1;n=w[a]||w[0];break;case c:var o=w.indexOf(e.target)-1;n=w[o]||w[w.length-1]}null==(t=n)||t.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":n},d)},p.map((function(e){var t=e.value,n=e.label;return a.createElement("li",{role:"tab",tabIndex:v===t?0:-1,"aria-selected":v===t,className:(0,r.Z)("tabs__item",s,{"tabs__item--active":v===t}),key:t,ref:function(e){return w.push(e)},onKeyDown:C,onFocus:N,onClick:N},n)}))),t?(0,a.cloneElement)(b.filter((function(e){return e.props.value===v}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},b.map((function(e,t){return(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==v})}))))}},1335:function(e,t,n){"use strict";var a=(0,n(7378).createContext)(void 0);t.Z=a},1415:function(e,t,n){"use strict";var a=n(7378),o=n(1335);t.Z=function(){var e=(0,a.useContext)(o.Z);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},9121:function(e,t,n){"use strict";n.d(t,{Y:function(){return i}});var a=n(7378),o=n(8287),r=n(3245),s=[{label:"JavaScript",value:"js"},{label:"Typescript",value:"ts"}],i=function(e){var t=e.defaultValue,n=void 0===t?"js":t,i=e.values,c=void 0===i?s:i,l=e.children;return a.createElement(o.Z,{defaultValue:n,values:c},c.map((function(e,t){return a.createElement(r.Z,{key:e.value,value:e.value},l[t])})))}},7222:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return u},metadata:function(){return p},toc:function(){return m},default:function(){return f}});var a=n(9603),o=n(120),r=n(7378),s=n(5318),i=n(8287),c=n(3245),l=n(9121),u={id:"installation",title:"Installation",sidebar_label:"Installation",slug:"/getting-started/installation"},p={unversionedId:"installation",id:"installation",isDocsHomePage:!1,title:"Installation",description:"Installation is as simple as running the npm command:",source:"@site/../docs/installation.md",sourceDirName:".",slug:"/getting-started/installation",permalink:"/docs/getting-started/installation",editUrl:"https://github.com/rematch/rematch/edit/main/docs/../docs/installation.md",version:"current",sidebar_label:"Installation",frontMatter:{id:"installation",title:"Installation",sidebar_label:"Installation",slug:"/getting-started/installation"},sidebar:"docs",previous:{title:"Introduction",permalink:"/docs/"},next:{title:"Typescript",permalink:"/docs/getting-started/typescript"}},m=[{value:"Basic usage",id:"basic-usage",children:[{value:"Step 1: Define models",id:"step-1-define-models",children:[]},{value:"Step 2: Init store",id:"step-2-init-store",children:[]},{value:"Step 3: Dispatch actions",id:"step-3-dispatch-actions",children:[]},{value:"Step 4: View",id:"step-4-view",children:[]}]}],d={toc:m};function f(e){var t=e.components,n=(0,o.Z)(e,["components"]);return(0,s.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"Installation is as simple as running the npm command:"),(0,s.kt)(i.Z,{groupId:"npm2yarn",defaultValue:"npm",values:[{label:"npm",value:"npm"},{label:"Yarn",value:"yarn"}],mdxType:"Tabs"},(0,s.kt)(c.Z,{value:"npm",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @rematch/core\n"))),(0,s.kt)(c.Z,{value:"yarn",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add @rematch/core\n")))),(0,s.kt)("p",null,"If you want to update all your @rematch packages to next features you can try:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"npx update-by-scope -t next @rematch\n")),(0,s.kt)("h2",{id:"basic-usage"},"Basic usage"),(0,s.kt)("h3",{id:"step-1-define-models"},"Step 1: Define models"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Model")," brings together state, reducers, async actions in one place. It describes a slice of your redux store and how it changes."),(0,s.kt)("p",null,"Understanding configuration of models is as simple as answering a few questions:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"What is my initial state? ",(0,s.kt)("strong",{parentName:"li"},"state")),(0,s.kt)("li",{parentName:"ol"},"How do I change the state? ",(0,s.kt)("strong",{parentName:"li"},"reducers")),(0,s.kt)("li",{parentName:"ol"},"How do I handle async actions? ",(0,s.kt)("strong",{parentName:"li"},"effects")," with async/await")),(0,s.kt)("p",null,"Below we define a simple model ",(0,s.kt)("inlineCode",{parentName:"p"},"count"),"."),(0,s.kt)(l.Y,{mdxType:"MultiLangComponent"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"export const count = {\n    state: 0, // initial state\n    reducers: {\n        // handle state changes with pure functions\n        increment(state, payload) {\n            return state + payload\n        },\n    },\n    effects: dispatch => ({\n        // handle state changes with impure functions.\n        // use async/await for async actions\n        async incrementAsync(payload, rootState) {\n            await new Promise(resolve => setTimeout(resolve, 1000))\n            dispatch.count.increment(payload)\n        },\n    }),\n}\n")),(0,s.kt)(r.Fragment,null,(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Use helper method ",(0,s.kt)("inlineCode",{parentName:"li"},"createModel")," to create a model."),(0,s.kt)("li",{parentName:"ul"},"You must pass the ",(0,s.kt)("inlineCode",{parentName:"li"},"RootModel")," type that is exported on your index.ts of your models."),(0,s.kt)("li",{parentName:"ul"},"State is automatically infered, if your state contains complex types you only need to use an ",(0,s.kt)("inlineCode",{parentName:"li"},"as")," ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/rematch/rematch/blob/next-types/examples/count-react-ts/src/models/questions.ts"},"Look at count-react-ts example on questions.ts"))),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"All the examples of Rematch with Typescript are fully tested in our testing suite, so feel free to look at the /examples folder for an easier integration with your codebase.")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="./models/countModel.ts"',title:'"./models/countModel.ts"'},"import { createModel } from '@rematch/core'\nimport { RootModel } from './models'\n\nexport const count = createModel<RootModel>()({\n    state: 0, // initial state\n    reducers: {\n        // handle state changes with pure functions\n        increment(state, payload: number) {\n            return state + payload\n        },\n    },\n    effects: (dispatch) => ({\n        // handle state changes with impure functions.\n        // use async/await for async actions\n        async incrementAsync(payload: number, state) {\n            console.log('This is current root state', state);\n            await new Promise(resolve => setTimeout(resolve, 1000))\n            dispatch.count.increment(payload)\n        },\n    }),\n});\n\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="./models/index.ts"',title:'"./models/index.ts"'},"import { Models } from '@rematch/core'\nimport { count } from './count'\n\nexport interface RootModel extends Models<RootModel> {\n    count: typeof count\n}\n\nexport const models: RootModel = { count }\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Example with a more complex state")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"import { createModel } from '@rematch/core'\nimport { RootModel } from './models'\n\ntype QuestionType = \"true-false\" | \"other-value\"\ntype Question = {\n    title: string\n}\n\ninterface CountState {\n    questions: Array<Question>\n    questionType: QuestionType\n}\n\nexport const count = createModel<RootModel>()({\n    state: {\n        questions: [],\n        questionType: \"true-false\"\n    } as CountState, // typed complex state\n    reducers: {\n        // handle state changes with pure functions\n        increment(state, payload: number) {\n            return state\n        },\n    },\n    effects: (dispatch) => ({\n        // handle state changes with impure functions.\n        // use async/await for async actions\n        async incrementAsync(payload: number, state) {\n            console.log('This is current root state', state);\n            await new Promise(resolve => setTimeout(resolve, 1000))\n            dispatch.count.increment(payload)\n        },\n    }),\n});\n")))),(0,s.kt)("h3",{id:"step-2-init-store"},"Step 2: Init store"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"init")," is the only method you need to call to build a fully configured Redux store. You can visit ",(0,s.kt)("a",{parentName:"p",href:"/docs/api-reference"},"api reference")," to learn more about all configuration parameters that can be used but as a bare minimum it is enough to provide ",(0,s.kt)("inlineCode",{parentName:"p"},"models")," object. It should contain mapping from a model name to model definition (created in step 1)."),(0,s.kt)(l.Y,{mdxType:"MultiLangComponent"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="store.js"',title:'"store.js"'},"import { init } from '@rematch/core'\nimport * as models from './models'\n\nconst store = init({ models })\n\nexport default store\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="store.ts"',title:'"store.ts"'},"import { init, RematchDispatch, RematchRootState } from '@rematch/core'\nimport { models, RootModel } from './models'\n\nexport const store = init({\n    models,\n})\n\nexport type Store = typeof store\nexport type Dispatch = RematchDispatch<RootModel>\nexport type RootState = RematchRootState<RootModel>\n"))),(0,s.kt)("h3",{id:"step-3-dispatch-actions"},"Step 3: Dispatch actions"),(0,s.kt)("p",null,"With ",(0,s.kt)("strong",{parentName:"p"},"dispatch")," you can trigger reducers & effects in your models. Dispatch standardizes your actions without the need for writing action types or action creators. Dispatch can be called directly, just like with plain Redux, or with the ",(0,s.kt)("inlineCode",{parentName:"p"},"dispatch[model][action](payload)")," shorthand."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const { dispatch } = store\n// state = { count: 0 }\n// reducers\ndispatch({ type: 'count/increment', payload: 1 }) // state = { count: 1 }\ndispatch.count.increment(1) // state = { count: 2 }\n\n// effects\ndispatch({ type: 'count/incrementAsync', payload: 1 }) // state = { count: 3 } after delay\ndispatch.count.incrementAsync(1) // state = { count: 4 } after delay\n")),(0,s.kt)("h3",{id:"step-4-view"},"Step 4: View"),(0,s.kt)("p",null,'Rematch can be used with native redux integrations such as "react-redux". See an example below.'),(0,s.kt)(l.Y,{mdxType:"MultiLangComponent"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="App.js"',title:'"App.js"'},"import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider, connect } from 'react-redux'\nimport store from './store'\n\nconst Count = (props) => (\n    <div>\n        The count is {props.count}\n        <button onClick={props.increment}>increment</button>\n        <button onClick={props.incrementAsync}>incrementAsync</button>\n    </div>\n)\n\nconst mapState = (state) => ({\n    count: state.count,\n})\n\nconst mapDispatch = (dispatch) => ({\n    increment: () => dispatch.count.increment(1),\n    incrementAsync: () => dispatch.count.incrementAsync(1),\n})\n\nconst CountContainer = connect(\n    mapState,\n    mapDispatch\n)(Count)\n\nReactDOM.render(\n    <Provider store={store}>\n        <CountContainer />\n    </Provider>,\n    document.getElementById('root')\n)\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="App.tsx"',title:'"App.tsx"'},"import * as React from 'react'\nimport { connect } from 'react-redux'\nimport { RootState, Dispatch } from './store'\n\nconst mapState = (state: RootState) => ({\n    count: state.count,\n})\n\nconst mapDispatch = (dispatch: Dispatch) => ({\n    increment: () => dispatch.count.increment(1),\n    incrementAsync: () => dispatch.count.incrementAsync(1),\n})\n\ntype StateProps = ReturnType<typeof mapState>\ntype DispatchProps = ReturnType<typeof mapDispatch>\ntype Props = StateProps & DispatchProps\n\nclass Count extends React.Component<Props> {\n    render() {\n        return (\n            <div>\n                The count is {props.count}\n                <button onClick={() => props.increment()}>increment</button>\n                <button onClick={() => props.incrementAsync()}>incrementAsync</button>\n            </div>\n        )\n    }\n}\n\nconst CountContainer = connect(mapState,mapDispatch)(Count)\n\nReactDOM.render(\n    <Provider store={store}>\n        <CountContainer />\n    </Provider>,\n    document.getElementById('root')\n)\n"))))}f.isMDXComponent=!0},5318:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return d}});var a=n(7378);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=l(n),d=o,f=m["".concat(c,".").concat(d)]||m[d]||p[d]||r;return n?a.createElement(f,s(s({ref:t},u),{},{components:n})):a.createElement(f,s({ref:t},u))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,s=new Array(r);s[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var l=2;l<r;l++)s[l]=n[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8944:function(e,t,n){"use strict";function a(e){var t,n,o="";if("string"==typeof e||"number"==typeof e)o+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=a(e[t]))&&(o&&(o+=" "),o+=n);else for(t in e)e[t]&&(o&&(o+=" "),o+=t);return o}function o(){for(var e,t,n=0,o="";n<arguments.length;)(e=arguments[n++])&&(t=a(e))&&(o&&(o+=" "),o+=t);return o}n.d(t,{Z:function(){return o}})}}]);