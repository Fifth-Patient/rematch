(self.webpackChunkrematch_docs=self.webpackChunkrematch_docs||[]).push([[409],{100:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},metadata:function(){return i},toc:function(){return l},default:function(){return c}});var o=n(9603),r=n(120),a=(n(7378),n(5318)),s={id:"typescript",title:"Typescript",sidebar_label:"Typescript",slug:"/getting-started/typescript"},i={unversionedId:"typescript",id:"typescript",isDocsHomePage:!1,title:"Typescript",description:"Rematch handles Typescript inference practically out of the box, we have all our codebase with Typescript (latest version) and we do continuous testing to our typescript examples.",source:"@site/../docs/typescript.md",sourceDirName:".",slug:"/getting-started/typescript",permalink:"/docs/getting-started/typescript",editUrl:"https://github.com/rematch/rematch/edit/main/docs/../docs/typescript.md",version:"current",sidebar_label:"Typescript",frontMatter:{id:"typescript",title:"Typescript",sidebar_label:"Typescript",slug:"/getting-started/typescript"},sidebar:"docs",previous:{title:"Installation",permalink:"/docs/getting-started/installation"},next:{title:"Rematch API Reference",permalink:"/docs/api-reference/"}},l=[{value:"createModel",id:"createmodel",children:[]},{value:"RootModel",id:"rootmodel",children:[]},{value:"init() store",id:"init-store",children:[{value:"init",id:"init",children:[]},{value:"init with plugins",id:"init-with-plugins",children:[]}]},{value:"React Hooks Types",id:"react-hooks-types",children:[{value:"useSelector",id:"useselector",children:[]},{value:"useDispatch",id:"usedispatch",children:[]}]},{value:"React class types",id:"react-class-types",children:[]},{value:"Effects returning values",id:"effects-returning-values",children:[]}],p={toc:l};function c(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Rematch handles Typescript inference practically out of the box, we have all our codebase with Typescript (latest version) and we do continuous testing to our ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/rematch/rematch/tree/main/examples/all-plugins-react-ts"},"typescript examples"),"."),(0,a.kt)("p",null,"For getting a cool Typescript setup with Rematch, it's as easy as using ",(0,a.kt)("inlineCode",{parentName:"p"},"createModel")," helper."),(0,a.kt)("h3",{id:"createmodel"},"createModel"),(0,a.kt)("p",null,"Use helper method ",(0,a.kt)("inlineCode",{parentName:"p"},"createModel")," to create a model."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="count.ts"',title:'"count.ts"'},"import { createModel } from '@rematch/core'\nimport { RootModel } from './models'\n\nexport const count = createModel<RootModel>()({\n    state: 0,\n    reducers: {\n        increment(state, payload: number) {\n            return state + payload\n        },\n    },\n    effects: (dispatch) => ({\n        incrementAsync(payload: number, state) {\n            dispatch.count.increment(payload)\n        },\n    }),\n});\n")),(0,a.kt)("p",null,"In the case of a complex state, like custom types just use ",(0,a.kt)("inlineCode",{parentName:"p"},"as"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { createModel } from '@rematch/core'\nimport { RootModel } from './models'\n\ntype Names = 'custom'\ntype ComplexCount = {\n    count: number;\n    multiplierName: Names;\n}\n\nexport const count = createModel<RootModel>()({\n    state: {\n        count: 0,\n        multiplierName: 'custom'\n    } as ComplexCount, // <-\n    reducers: {\n        increment(state, payload: number) {\n            return {\n                count: state.count + payload\n            }\n        },\n    },\n    effects: (dispatch) => ({\n        incrementAsync(payload: number, state) {\n            dispatch.count.increment(payload)\n        },\n    }),\n});\n")),(0,a.kt)("h3",{id:"rootmodel"},"RootModel"),(0,a.kt)("p",null,"RootModel is the file that stores all your models. We need it because you can dispatch effects and access state from other models (it's global), so we need to know all the models for bringing you the intellisense."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="models.ts"',title:'"models.ts"'},"import { Models } from '@rematch/core'\nimport { count } from './count'\n\nexport interface RootModel extends Models<RootModel> {\n    count: typeof count\n}\n\nexport const models: RootModel = { count }\n")),(0,a.kt)("h2",{id:"init-store"},"init() store"),(0,a.kt)("h3",{id:"init"},"init"),(0,a.kt)("p",null,"With your model ready with ",(0,a.kt)("inlineCode",{parentName:"p"},"createModel()")," helper and the ",(0,a.kt)("inlineCode",{parentName:"p"},"RootModel")," exported, you only need to ",(0,a.kt)("inlineCode",{parentName:"p"},"init()")," the store."),(0,a.kt)("p",null,"Now we like to export some common types:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Store"),": type"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"RematchDispatch"),": useful for knowing all the effects and reducers methods and his parameters"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"RematchRootState"),": you will get intellisense of each state of each model.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="store.ts"',title:'"store.ts"'},"import { init, RematchDispatch, RematchRootState } from '@rematch/core'\nimport { models, RootModel } from './models'\n\nexport const store = init({\n    models,\n})\n\nexport type Store = typeof store\nexport type Dispatch = RematchDispatch<RootModel>\nexport type RootState = RematchRootState<RootModel>\n")),(0,a.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"In the case you use some plugin, please read this:"))),(0,a.kt)("h3",{id:"init-with-plugins"},"init with plugins"),(0,a.kt)("p",null,"Some plugins modifies the store like ",(0,a.kt)("a",{parentName:"p",href:"/docs/plugins/loading"},(0,a.kt)("inlineCode",{parentName:"a"},"@rematch/loading")),", that introduces a new state with all your promises status, Typescript to know that needs some helper."),(0,a.kt)("p",null,"You need to pass the ",(0,a.kt)("a",{parentName:"p",href:"#RootModel"},(0,a.kt)("inlineCode",{parentName:"a"},"RootModel"))," to ",(0,a.kt)("inlineCode",{parentName:"p"},"init()")," function and introduce the helpers:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"@rematch/loading"),":  { ExtraModelsFromLoading }"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"@rematch/updated"),":  { ExtraModelsFromUpdated }")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="store.ts"',title:'"store.ts"'},"import { init, RematchDispatch, RematchRootState } from '@rematch/core'\nimport { models, RootModel } from './models'\n\n/** Plugins **/\nimport updatedPlugin, { ExtraModelsFromUpdated } from '@rematch/updated'\nimport loadingPlugin, { ExtraModelsFromLoading } from '@rematch/loading'\n\ntype FullModel =  ExtraModelsFromLoading<RootModel> & ExtraModelsFromUpdated<RootModel>\n\nexport const store = init<RootModel, FullModel>({\n    models,\n    plugins: [\n        loadingPlugin(),\n        updatedPlugin(),\n    ]\n})\n\nexport type Store = typeof store\nexport type Dispatch = RematchDispatch<RootModel>\nexport type RootState = RematchRootState<RootModel>\n")),(0,a.kt)("h2",{id:"react-hooks-types"},"React Hooks Types"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"RootState")," and ",(0,a.kt)("strong",{parentName:"li"},"Dispatch")," types: import this types from the previous file mentioned: ",(0,a.kt)("a",{parentName:"li",href:"#init"},"init"))),(0,a.kt)("h3",{id:"useselector"},"useSelector"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import React from 'react'\nimport { RootState } from './store'\nimport { useSelector } from 'react-redux'\n\nconst Count = () => {\n    const countState = useSelector((state: RootState) => state.count)\n\n    return (\n        <div>example</div>\n    )\n}\n")),(0,a.kt)("h3",{id:"usedispatch"},"useDispatch"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import React from 'react'\nimport { Dispatch } from './store'\nimport { useDispatch } from 'react-redux'\n\nconst Count = () => {\n    const dispatch = useDispatch<Dispatch>()\n\n    return (\n        <div>example</div>\n    )\n}\n")),(0,a.kt)("h2",{id:"react-class-types"},"React class types"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import React from 'react'\nimport { RootState, Dispatch } from './store'\nimport { connect } from 'react-redux'\n\nclass App extends React.PureComponent<Props> {\n    render() {\n        const { countState } = this.props\n        return (\n            <div>example</div>\n        )\n    }\n}\n\nconst mapState = (state: RootState) => ({\n    countState: state.count,\n})\n\nconst mapDispatch = (dispatch: Dispatch) => ({\n    count: dispatch.count,\n})\n\ntype StateProps = ReturnType<typeof mapState>\ntype DispatchProps = ReturnType<typeof mapDispatch>\ntype Props = StateProps & DispatchProps\n\nexport default connect(mapState, mapDispatch)(App)\n")),(0,a.kt)("h2",{id:"effects-returning-values"},"Effects returning values"),(0,a.kt)("p",null,"There's a situation where if you're accessing the ",(0,a.kt)("inlineCode",{parentName:"p"},"rootState")," value of the same model and returning this value. Typescript will fail because circular references itself (has sense)..."),(0,a.kt)("p",null,"You should try to avoid returning values on effects and just dispatch data to reducers or write pure functions outside Rematch for a better performance."),(0,a.kt)("p",null,"Anyways, you can omit this error force typing the effect. ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/rematch/rematch/issues/864#issuecomment-781357794"},"Related Github Issue")),(0,a.kt)("p",null,"Instead of:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"async isIdEnabled(payload: { name: string }, rootState) {\n   // ...\n}\n")),(0,a.kt)("p",null,"Define the return value:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"async isIdEnabled(payload: { name: string }, rootState): Promise<boolean> {\n  // ...\n}\n")))}c.isMDXComponent=!0},5318:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return m}});var o=n(7378);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),p=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return o.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(n),m=r,h=u["".concat(l,".").concat(m)]||u[m]||d[m]||a;return n?o.createElement(h,s(s({ref:t},c),{},{components:n})):o.createElement(h,s({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,s=new Array(a);s[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var p=2;p<a;p++)s[p]=n[p];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);