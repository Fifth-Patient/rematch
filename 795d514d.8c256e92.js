(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{120:function(e,t,a){"use strict";a.d(t,"a",(function(){return p})),a.d(t,"b",(function(){return d}));var n=a(0),r=a.n(n);function c(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){c(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},c=Object.keys(e);for(n=0;n<c.length;n++)a=c[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)a=c[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var i=r.a.createContext({}),u=function(e){var t=r.a.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=u(e.components);return r.a.createElement(i.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,c=e.originalType,o=e.parentName,i=s(e,["components","mdxType","originalType","parentName"]),p=u(a),m=n,d=p["".concat(o,".").concat(m)]||p[m]||b[m]||c;return a?r.a.createElement(d,l(l({ref:t},i),{},{components:a})):r.a.createElement(d,l({ref:t},i))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var c=a.length,o=new Array(c);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:n,o[1]=l;for(var i=2;i<c;i++)o[i]=a[i];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,a)}m.displayName="MDXCreateElement"},121:function(e,t,a){"use strict";function n(e){var t,a,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(a=n(e[t]))&&(r&&(r+=" "),r+=a);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}t.a=function(){for(var e,t,a=0,r="";a<arguments.length;)(e=arguments[a++])&&(t=n(e))&&(r&&(r+=" "),r+=t);return r}},123:function(e,t,a){"use strict";var n=a(0),r=a.n(n),c=a(126),o=a(121),l=a(55),s=a.n(l),i=37,u=39;t.a=function(e){var t=e.lazy,a=e.block,l=e.defaultValue,p=e.values,b=e.groupId,m=e.className,d=Object(c.a)(),h=d.tabGroupChoices,j=d.setTabGroupChoices,f=Object(n.useState)(l),O=f[0],g=f[1],y=n.Children.toArray(e.children);if(null!=b){var v=h[b];null!=v&&v!==O&&p.some((function(e){return e.value===v}))&&g(v)}var N=function(e){g(e),null!=b&&j(b,e)},w=[];return r.a.createElement("div",null,r.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(o.a)("tabs",{"tabs--block":a},m)},p.map((function(e){var t=e.value,a=e.label;return r.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":O===t,className:Object(o.a)("tabs__item",s.a.tabItem,{"tabs__item--active":O===t}),key:t,ref:function(e){return w.push(e)},onKeyDown:function(e){!function(e,t,a){switch(a.keyCode){case u:!function(e,t){var a=e.indexOf(t)+1;e[a]?e[a].focus():e[0].focus()}(e,t);break;case i:!function(e,t){var a=e.indexOf(t)-1;e[a]?e[a].focus():e[e.length-1].focus()}(e,t)}}(w,e.target,e)},onFocus:function(){return N(t)},onClick:function(){N(t)}},a)}))),t?Object(n.cloneElement)(y.filter((function(e){return e.props.value===O}))[0],{className:"margin-vert--md"}):r.a.createElement("div",{className:"margin-vert--md"},y.map((function(e,t){return Object(n.cloneElement)(e,{key:t,hidden:e.props.value!==O})}))))}},124:function(e,t,a){"use strict";var n=a(3),r=a(0),c=a.n(r);t.a=function(e){var t=e.children,a=e.hidden,r=e.className;return c.a.createElement("div",Object(n.a)({role:"tabpanel"},{hidden:a,className:r}),t)}},126:function(e,t,a){"use strict";var n=a(0),r=a(127);t.a=function(){var e=Object(n.useContext)(r.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},127:function(e,t,a){"use strict";var n=a(0),r=Object(n.createContext)(void 0);t.a=r},131:function(e,t,a){"use strict";a.d(t,"a",(function(){return s}));var n=a(0),r=a.n(n),c=a(123),o=a(124),l=[{label:"JavaScript",value:"js"},{label:"Typescript",value:"ts"}],s=function(e){var t=e.defaultValue,a=void 0===t?"js":t,n=e.values,s=void 0===n?l:n,i=e.children;return r.a.createElement(c.a,{defaultValue:a,values:s},s.map((function(e,t){return r.a.createElement(o.a,{key:e.value,value:e.value},i[t])})))}},96:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return i})),a.d(t,"metadata",(function(){return u})),a.d(t,"toc",(function(){return p})),a.d(t,"default",(function(){return m}));var n=a(3),r=a(7),c=(a(0),a(120)),o=a(123),l=a(124),s=a(131),i={id:"select",title:"Select",sidebar_label:"@rematch/select",slug:"/plugins/select/"},u={unversionedId:"plugins/select",id:"plugins/select",isDocsHomePage:!1,title:"Select",description:"A plugin to add memoized state selection to Rematch. Selectors are created using Reselect by default and are automatically wired with selector dependencies from other models.",source:"@site/../docs/plugins/select.md",slug:"/plugins/select/",permalink:"/docs/plugins/select/",editUrl:"https://github.com/rematch/rematch/edit/main/docs/../docs/plugins/select.md",version:"current",sidebar_label:"@rematch/select",sidebar:"docs",previous:{title:"Immer",permalink:"/docs/plugins/immer/"},next:{title:"Loading",permalink:"/docs/plugins/loading/"}},p=[{value:"Compatibility",id:"compatibility",children:[]},{value:"Install",id:"install",children:[]},{value:"selectPlugin(config)",id:"selectpluginconfig",children:[]},{value:"Usage",id:"usage",children:[{value:"1. Add plugin",id:"1-add-plugin",children:[]},{value:"2. Add selectors",id:"2-add-selectors",children:[]},{value:"3. Selector Examples",id:"3-selector-examples",children:[]},{value:"4. Using Selectors In Your App",id:"4-using-selectors-in-your-app",children:[]}]},{value:"Recipes",id:"recipes",children:[{value:"Immutable.js",id:"immutablejs",children:[]},{value:"Re-reselect",id:"re-reselect",children:[]},{value:"Alternative to selecting",id:"alternative-to-selecting",children:[]}]}],b={toc:p};function m(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(c.b)("wrapper",Object(n.a)({},b,a,{components:t,mdxType:"MDXLayout"}),Object(c.b)("p",null,"A plugin to add memoized state selection to Rematch. Selectors are created using ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/reduxjs/reselect"}),"Reselect")," by default and are automatically wired with selector dependencies from other models."),Object(c.b)("h2",{id:"compatibility"},"Compatibility"),Object(c.b)("p",null,"Install the correct version of select plugin based on the version of the core Rematch library in your project."),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"@rematch/core"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"@rematch/select"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"1.x.x"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"2.x.x")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"2.x.x"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"3.x")))),Object(c.b)("h2",{id:"install"},"Install"),Object(c.b)(o.a,{groupId:"npm2yarn",defaultValue:"npm",values:[{label:"npm",value:"npm"},{label:"Yarn",value:"yarn"}],mdxType:"Tabs"},Object(c.b)(l.a,{value:"npm",mdxType:"TabItem"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"npm install @rematch/select\n"))),Object(c.b)(l.a,{value:"yarn",mdxType:"TabItem"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"yarn add @rematch/select\n")))),Object(c.b)("h2",{id:"selectpluginconfig"},"selectPlugin(","[config]",")"),Object(c.b)("p",null,"The select plugin accepts one optional argument - ",Object(c.b)("strong",{parentName:"p"},"config"),", which is an object with the following properties:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("p",{parentName:"li"},"[",Object(c.b)("inlineCode",{parentName:"p"},"sliceState"),"]"," (",Object(c.b)("em",{parentName:"p"},"(rootState, model) => modelState"),"): custom function for getting model's state based on the store's root state and the model object. The default function assumes your store is a plain JavaScript object. You might need to overwrite it in some cases, see the ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"#immutablejs"}),"plugin's recipes for an example"),".")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("p",{parentName:"li"},"[",Object(c.b)("inlineCode",{parentName:"p"},"selectorCreator"),"]"," (",Object(c.b)("em",{parentName:"p"},"(selector, combiner) => outputSelector"),"): you can replace Reselect library with a different one by providing a custom function for creating selectors that has the same interface as Reselect. See the ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"#re-reselect"}),"plugin's recipes for an example"),"."))),Object(c.b)("h2",{id:"usage"},"Usage"),Object(c.b)("h3",{id:"1-add-plugin"},"1. Add plugin"),Object(c.b)("p",null,"Start by adding the plugin to your store:"),Object(c.b)(s.a,{mdxType:"MultiLangComponent"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js",metastring:'title="store.js"',title:'"store.js"'}),"import { init } from '@rematch/core'\nimport selectPlugin from '@rematch/select'\nimport * as models from './models'\n\ninit({\n  models,\n  // add selectPlugin to your store\n  plugins: [selectPlugin()],\n})\n")),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts",metastring:'title="store.ts"',title:'"store.ts"'}),"import selectPlugin from '@rematch/select'\nimport { init, RematchDispatch, RematchRootState } from '@rematch/core'\nimport { models, RootModel } from './models'\n\nexport const store = init<RootModel>({\n    models,\n    // add selectPlugin to your store\n    plugins: [selectPlugin()],\n})\n\nexport type Store = typeof store\nexport type Dispatch = RematchDispatch<RootModel>\nexport type RootState = RematchRootState<RootModel>\n\n"))),Object(c.b)("h3",{id:"2-add-selectors"},"2. Add selectors"),Object(c.b)("p",null,"Now add selectors to your models. A ",Object(c.b)("strong",{parentName:"p"},'"selector"')," is a function that given the current ",Object(c.b)("strong",{parentName:"p"},"root state")," and ",Object(c.b)("strong",{parentName:"p"},"props")," returns some value:"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"(rootState, props) => rootState.cart.reduce((total, item) => total + (item.price * item.amount), 0)\n")),Object(c.b)("p",null," To make our applications fast, we actually want to create ",Object(c.b)("strong",{parentName:"p"},'"memoized selectors"'),", which means they recalculate only when the data they are based on changes. The selector plugin exposes some functions to make this process easy."),Object(c.b)("p",null,"Selectors can be added to a model using the ",Object(c.b)("inlineCode",{parentName:"p"},"selectors")," property. It must be a function accepting the following arguments and returning selectors:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"slice")," - utility function that can be used in two different ways:",Object(c.b)("ul",{parentName:"li"},Object(c.b)("li",{parentName:"ul"},"(",Object(c.b)("em",{parentName:"li"},"(modelState => value) => memoizedSelector"),"): it can accept as an argument a selector from current's model state. In this case it returns a memoized selector. It is basically a shortcut for creating simple memoized selectors."),Object(c.b)("li",{parentName:"ul"},"(",Object(c.b)("em",{parentName:"li"},"(rootState) => modelState"),"): if given a root state as an argument, it returns current's model state."))),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"createSelector")," - function for creating memoized selectors. By default, it's Reselect's ",Object(c.b)("em",{parentName:"li"},"createSelector")," function. Refer to ",Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/reduxjs/reselect#createselectorinputselectors--inputselectors-resultfunc"}),"Reselect documentation")," for details."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"hasProps")," - utility function which creates a new selector cache for each new set of ",Object(c.b)("inlineCode",{parentName:"li"},"props"),". It wraps an entire selector factory and creates a higher-order selector. ",Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"#re-reselect"}),"For complex calculations or dashboards a recipe may be better"),".")),Object(c.b)("p",null,"There are three more details to keep in mind:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"Inside selectors, ",Object(c.b)("inlineCode",{parentName:"li"},"this")," is bound to the current model's selectors."),Object(c.b)("li",{parentName:"ul"},"Each selector accepts ",Object(c.b)("inlineCode",{parentName:"li"},"models")," argument which allows accessing selectors from other models."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/reduxjs/reselect/blob/master/README.md#sharing-selectors-with-props-across-multiple-component-instances"}),"Be careful when passing ",Object(c.b)("inlineCode",{parentName:"a"},"props")," to a selector because of how reselect caches results."))),Object(c.b)("h3",{id:"3-selector-examples"},"3. Selector Examples"),Object(c.b)("p",null,"Let's look at the examples!"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const model = {\n  name: 'cart',\n  state: [{\n    price: 42.00,\n    amount: 3,\n    productId: 2,\n  }],\n  selectors: (slice, createSelector, hasProps) => ({\n    // creates a simple memoized selector based on the cart state\n    total () {\n      return slice(cart =>\n        cart.reduce((a, b) => a + (b.price * b.amount), 0)\n      )\n    },\n    // uses createSelector method to create more complex memoized selector\n    totalWithShipping () {\n      return createSelector(\n        slice, // shortcut for (rootState) => rootState.cart\n        (rootState, props) => props.shipping,\n        (cart, shipping) => cart.reduce((a, b) => a + (b.price * b.amount), shipping)\n      )\n    },\n    // refers to the other selector from this model\n    doubleTotal () {\n      return createSelector(\n        this.totalWithShipping,\n        (totalWithShipping) => totalWithShipping * 2,\n      )\n    },\n    // accesses selector from a different model\n    productsPopularity (models) {\n      return createSelector(\n        slice, // shortcut for (rootState) => rootState.cart\n        models.popularity.pastDay, // gets 'pastDay' selector from 'popularity' model\n        (cart, hot) => cart.sort((a, b) => hot[a.productId] > hot[b.productId])\n      )\n    },\n    // uses hasProps function, which returns new selector for each given lowerLimit prop\n    expensiveFilter: hasProps(function (models, lowerLimit) {\n      return slice(items => items.filter(item => item.price > lowerLimit))\n    }),\n    // uses expensiveFilter selector to create a new selector where lowerLimit is set to 20.00\n    wouldGetFreeShipping () {\n      return this.expensiveFilter(20.00)\n    },\n  }),\n}\n")),Object(c.b)("h3",{id:"4-using-selectors-in-your-app"},"4. Using Selectors In Your App"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"@rematch/select")," adds a ",Object(c.b)("inlineCode",{parentName:"p"},"select")," property to the store. It can be used in two ways:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"select( mapSelectToStructure: (select) => object)"))),Object(c.b)("p",null,"When called as a function, ",Object(c.b)("inlineCode",{parentName:"p"},"select")," lazily creates a ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/reduxjs/reselect#createstructuredselectorinputselectors-selectorcreator--createselector"}),"structuredSelector")," using the selectors you return in ",Object(c.b)("inlineCode",{parentName:"p"},"mapSelectToStructure"),"."),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const selection = store.select(models => ({\n    total: models.cart.total,\n    eligibleItems: models.cart.wouldGetFreeShipping,\n}))\n\n// it can be used as 'mapStateToProps'\nconnect(selection)(MyComponent)\n// or\nconnect(state => ({\n    contacts: state.contacts.collection,\n    ...selection(state),\n}))(MyComponent)\n")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"select: { [modelName]: { [selectorName]: (state) => any } }"))),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"select")," is also an object with a group of selectors for each of your store models. Selectors are regular functions that can be called anywhere within your application."),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const moreThan50 = store.select.cart.expensiveFilter(50.0)\n\nconsole.log(moreThan50(store.getState()))\n\nconst mapStateToProps = state => ({\n    items: moreThan50(state),\n})\n")),Object(c.b)("h2",{id:"recipes"},"Recipes"),Object(c.b)("h3",{id:"immutablejs"},"Immutable.js"),Object(c.b)("p",null,"If you are using an ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://facebook.github.io/immutable-js/"}),"Immutable.js")," Map as your store, you will need to configure the plugin to slice the state using ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"http://facebook.github.io/immutable-js/docs/#/Map/get"}),"Map.get","(",")"),":"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"selectorsPlugin({\n    sliceState: (rootState, model) => rootState.get(model.name),\n})\n")),Object(c.b)("p",null,"Now you can use an ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"http://facebook.github.io/immutable-js/docs/#/Map"}),"Immutable.js Map")," as your store and access the appropriate slice of the state in each of your selectors."),Object(c.b)("h3",{id:"re-reselect"},"Re-reselect"),Object(c.b)("p",null,"When working on a dashboard or doing calculations with a lot of external values, you may find your selectors always re-run. This happens when your selector has props and then is shared between multiple components."),Object(c.b)("p",null,"Selectors have a cache size of 1. Passing a different set of props will invalidate the cache. ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/toomuchdesign/re-reselect"}),"re-reselect exists to solve this by caching your selectors by props as well"),"."),Object(c.b)("p",null,"You can configure the plugin to use re-reselect:"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"import createCachedSelector from 're-reselect'\n\nselectorPlugin({\n    selectorCreator: createCachedSelector,\n})\n")),Object(c.b)("h3",{id:"alternative-to-selecting"},"Alternative to selecting"),Object(c.b)("p",null,"The reason we use selectors is because they are lazy. The biggest drawback is that they have to rely on other models' public lazy interfaces - ",Object(c.b)("inlineCode",{parentName:"p"},"slice")," will only ever access the current model."),Object(c.b)("p",null,"The actions fired by our store are another public interface that can eagerly track the changes to other models. Using a listener reducer might fit some applications better:"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"reducers: {\n  'selectedGroup/change' (state, id) {\n    return {\n      ...state,\n      list: id\n        ? state.unfilteredList.filter.(p => p.group === id)\n        : state.unfilteredList\n    }\n  }\n}\n")))}m.isMDXComponent=!0}}]);